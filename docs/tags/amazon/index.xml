<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>amazon on pipetail Blog</title>
    <link>https://blog.pipetail.io/tags/amazon/</link>
    <description>Recent content in amazon on pipetail Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Â© 2020 pipetail. All rights reserved.</copyright>
    <lastBuildDate>Mon, 13 Apr 2020 07:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://blog.pipetail.io/tags/amazon/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>More EKS tips to make your life easier</title>
      <link>https://blog.pipetail.io/posts/2020-04-13-more-eks-tips/</link>
      <pubDate>Mon, 13 Apr 2020 07:00:00 +0100</pubDate>
      
      <guid>https://blog.pipetail.io/posts/2020-04-13-more-eks-tips/</guid>
      <description>We&amp;rsquo;ve spent most of the last month on implementing EKS. Surprisingly, we&amp;rsquo;re always solving the same concerns no matter what project we&amp;rsquo;re working on. Here&amp;rsquo;s couple of tips for your EKS clusters!
Skip kube2iam, go directly with IAM Roles for Service Accounts Kube2iam is amazing tool. I really like it and it helped me with granular control access in couple of projects. However, there&amp;rsquo;s a better solution that is supported out of the box: IAM roles for services accounts.</description>
    </item>
    
    <item>
      <title>Getting started with PodSecurityPolicy on EKS</title>
      <link>https://blog.pipetail.io/posts/2020-03-15-psp-on-eks/</link>
      <pubDate>Sun, 15 Mar 2020 07:00:00 +0100</pubDate>
      
      <guid>https://blog.pipetail.io/posts/2020-03-15-psp-on-eks/</guid>
      <description>&lt;p&gt;As you might already know, security is not something that a specialized department should
be responsible for. Instead, we all should bear in mind that security matters and build
secure solutions from the very beginning. Today we&amp;rsquo;re gonna talk about some practices
in the world of containerized apps and Kubernetess. So let&amp;rsquo;s say we have some best practices
for the containerized workloads. But how to enforce that? We&amp;rsquo;ll tell you right away.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Systems Manager Session Manager: bye bye bastion hosts!</title>
      <link>https://blog.pipetail.io/posts/2020-02-24-amazon-ssm-session-manager/</link>
      <pubDate>Mon, 24 Feb 2020 07:00:00 +0100</pubDate>
      
      <guid>https://blog.pipetail.io/posts/2020-02-24-amazon-ssm-session-manager/</guid>
      <description>&lt;p&gt;There are customers where public internet access is no go. But
at the same time you need to access your EC2 instances,
right? How would you approach this? Usually, we use bastion hosts,
that&amp;rsquo;s basically a different name for jump host you can use
to access internal resources. In AWS, you don&amp;rsquo;t need to manage
such extra instances and take care of all the low-level configuration.
Instead, you can leverage fully managed Session Manager from the
AWS Systems Manager suite!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>